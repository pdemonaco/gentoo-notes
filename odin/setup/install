#!/usr/bin/zsh

##
# Boot using a gentoo-esq live CD which includes ZFS support. For
# this install I utilized System Rescue CD version 4.5.2 with 
# zfs-0.6.4 builtin. 

#===== Disk ===================================================================
DISK1="/dev/disk/by-id/usb-TOSHIBA_TransMemory_FFFFFFFFFFFFEEA16000F047-0:0"
DISK2="/dev/disk/by-id/usb-TOSHIBA_TransMemory_FFFFFFFFFFFFEEA16000F1C0-0:0"

# Three partitions per drive
parted -a optimal $DISK1

## Convert to mebibytes
unit mib

## Set the partition type
mklabel gpt

## grub boot
# create a 2 MiB file system for BIOS grub
mkpart primary 1 3
name 1 grub-0
set 1 bios_grub on

## boot pool
mkpart primary 3 259
name 2 boot-pl-0

## system pool
mkpart primary 259 -1
name 3 sys-pl-0

#----- File Systems ---------------------------------------
# Make the file systems
#- Grub (Partition 1)
# bios_grub doesn't need a file system

#--- Boot Pool (Partition 2)
# Create a new pool 
zpool create -o ashift=12 -o version=28 -o autoexpand=on \
    -O normalization=formD -m none -R /mnt/gentoo/boot boot-pl \
    mirror ${DISK1}-part2 ${DISK2}-part2

# Boot filesystem
zfs create -o mountpoint=none boot-pl/BOOT
zfs create -o mountpoint=/boot -o canmount=noauto boot-pl/BOOT/boot
zpool set bootfs=boot-pl/BOOT/boot boot-pl

#--- Syspool (Partition 3)
# This is the install pool
zpool create -o ashift=12 -o autoexpand=on -o feature@lz4_compress=enabled \
    -O normalization=formD -m none -R /mnt/gentoo sys-pl \
    mirror ${DISK1}-part3 ${DISK2}-part3

# Swap
zfs create sys-pl/swap -V 2G -b 4K
mkswap /dev/sys-pl/swap

# Root
zfs create -o mountpoint=none sys-pl/ROOT
zfs create -o mountpoint=/ -o compression=lz4 sys-pl/ROOT/gentoo

# home
zfs create -o mountpoint=/home -o compression=lz4 sys-pl/HOME

# portage
zfs create -o mountpoint=none sys-pl/GENTOO
zfs create -o mountpoint=/usr/portage -o compression=lz4 sys-pl/GENTOO/portage
zfs create -o mountpoint=/usr/portage/distfiles sys-pl/GENTOO/distfiles

# portage (build)
# Extra settings like sync off & compression
zfs create -o mountpoint=/var/tmp/portage -o compression=lz4 -o sync=disabled sys-pl/GENTOO/build-dir

# packages
zfs create -o mountpoint=/usr/portage/packages sys-pl/GENTOO/packages

# ccache directory
zfs create -o mountpoint=/var/tmp/ccache -o compression=lz4 sys-pl/GENTOO/ccache

#----- Installation Files ---------------------------------
# Time fix
# Get the current UTC time & set it
# Make sure that system time in the bios is UTC before doing this
date MMDDhhmmCCYY.ss

## If you've rebooted or whatever import your zpool
zpool import -f -o cachefile= -R /mnt/gentoo sys-pl

## Go to the mountpoint
cd /mnt/gentoo

## Download Sources
wget ftp://ftp.gtlib.gatech.edu/pub/gentoo/releases/amd64/autobuilds/current-stage3-amd64/stage3-amd64-20150521.tar.bz2
wget ftp://ftp.gtlib.gatech.edu/pub/gentoo/releases/amd64/autobuilds/current-stage3-amd64/stage3-amd64-20150521.tar.bz2.DIGESTS

## Corruption check
# Now that we have the sources, check them out
grep --color $(openssl dgst -r -sha512 stage3-amd64-*.tar.bz2 | awk '{print $1}') stage3-amd64-*.tar.bz2.DIGESTS
# Should see a line that matches

## Extract the tarball
tar xvjpf stage3-*.tar.bz2 --xattrs

## Download the portage snapshot
wget ftp://ftp.gtlib.gatech.edu/pub/gentoo/snapshots/portage-latest.tar.xz
wget ftp://ftp.gtlib.gatech.edu/pub/gentoo/snapshots/portage-latest.tar.xz.md5sum

## Check for corruption
grep --color $(openssl dgst -r -md5 portage-latest.tar.xz | awk '{print $1}') portage-latest.tar.xz.md5sum

##### Portage #####
# Mix in some steps from chapters 5-6 of the gentoo handbook
# Mainly setting up make.conf

# Determine instruction set
emerge -1v app-portage/cpuinfo2cpuflags
cpuinfo2cpuflags-x86

# Copy in resolv.conf
cp -L /etc/resolv.conf /mnt/gentoo/etc/

#----- chroot ---------------------------------------------
## Mount filesystems
mount -t proc proc /mnt/gentoo/proc
mount --rbind /dev /mnt/gentoo/dev
mount --rbind /sys /mnt/gentoo/sys

## Unmount commands
# umount -l /mnt/gentoo/proc /mnt/gentoo/dev /mnt/gentoo/sys

## chroot
chroot /mnt/gentoo /bin/bash
env-update; source /etc/profile; export PS1="(chroot) $PS1"; cd

#----- basic-setup ----------------------------------------
## Configure Portage
emerge-webrsync
emerge --sync

## Configure your timezone
echo "America/Detroit" > /etc/timezone
emerge --config sys-libs/timezone-data

## Pick locales in /etc/locale.gen
# Generate
locale-gen
# Set
eselect locale list
eselect locale set <num>

## Get vim. damnit.
emerge -av vim
eselect editor list
eselect editor set $(eselect editor list | grep vi | sed -e 's/\[//' -e 's/\]//' | awk '{ print $1 }')

#----- Kernel config --------------------------------------
## Install sources & genkernel
emerge -av sys-kernel/genkernel sys-kernel/gentoo-sources

# Build initial kernel (required for checks in sys-kernel/spl and sys-fs/zfs)
cd /usr/src/linux
make -j25

3w-9xxx
ahci
ehci-pci
firewire_ohci
i7core_edac
lpc_ich
mvsas
nouveau
pcieport
sky2
uhci_hcd
xhci_hcd

#----- ZFS config -----------------------------------------
# Ensure the appropriate exceptions are added to package.accept_keywords
echo "sys-kernel/spl ~amd64" >> /etc/portage/package.accept_keywords/zfs
echo "sys-fs/zfs-kmod ~amd64" >> /etc/portage/package.accept_keywords/zfs
echo "sys-fs/zfs ~amd64" >> /etc/portage/package.accept_keywords/zfs

# Emerge zfs
emerge -av sys-fs/zfs

# Create the builtin components
SPL_VER="0.6.5.3"
ZFS_VER="0.6.5.3"
env EXTRA_ECONF='--enable-linux-builtin' ebuild \
    /usr/portage/sys-kernel/spl/spl-${SPL_VER}.ebuild clean configure
(cd /var/tmp/portage/sys-kernel/spl-${SPL_VER}/work/spl-${SPL_VER}/ && \
    ./copy-builtin /usr/src/linux)
env EXTRA_ECONF='--with-spl=/usr/src/linux --enable-linux-builtin' ebuild \
    /usr/portage/sys-fs/zfs-kmod/zfs-kmod-${ZFS_VER}.ebuild clean configure
(cd /var/tmp/portage/sys-fs/zfs-kmod-${ZFS_VER}/work/zfs-${ZFS_VER}/ && \
    ./copy-builtin /usr/src/linux)

# Enable builtin zfs/spl in kernel
<*> Solaris Porting Layer (SPL)
File systems ---->
  <*> ZFS filesystem support

# Add zfs to the boot runlevel
rc-update add zfs-zed boot
rc-update add zfs-import boot
rc-update add zfs-mount boot
rc-update add zfs-share default

# Remerge
mkdir -p /etc/portage/profile
echo "sys-fs/zfs -kernel-builtin" >> /etc/portage/profile/package.use.mask
echo "sys-fs/zfs kernel-builtin" >> /etc/portage/package.use/zfs
emerge -1av sys-fs/zfs

#----- Initramfs ------------------------------------------
# Genkernel
emerge -av sys-kernel/genkernel

# After copying in config - perform
genkernel --no-clean --no-mountboot --keymap --zfs --compress-initramfs \
    --compress-initramfs-type=xz initramfs

#----- Bootloader -----------------------------------------
## Ensure grub is built with zfs support
echo "sys-boot/grub:2 libzfs" >> /etc/portage/package.use/grub

## Add exceptions for latest version
echo "sys-boot/grub:2 ~amd64" >> /etc/portage/package.accept_keywords

## Emerge grub
emerge -av sys-boot/grub:2

## Add the following line to /etc/default/grub
GRUB_CMDLINE_LINUX="zfs_force=1 vconsole.keymap=dvorak"

## Make sure mtab exists
touch /etc/mtab

## If you have a separate boot pool imported from within chroot
zpool import boot-pl

## Mount the boot volume from within the chroot environment
zfs mount syspool/BOOT/boot 
# Note that this will probably put the file in the wrong
# directory due to the root redirection

## Install
grub2-install --target="i386-pc" "${DISK1}"
grub2-install --target="i386-pc" "${DISK2}"

## Build the grub config file
grub2-mkconfig -o /boot/grub/grub.cfg
# Note that this is only necessary until gentoo grub 
# can appropriately read the zfs on-disk format again
POOL=$(zfs list | awk '$5 ~ /^\/$/ { split( $1, name, "/" ); print name[1] }')
echo $POOL
sed -i "s/ZFS=\//ZFS=${POOL}\//g" grub/grub.cfg
# Might not work in a chroot environment - no "/" mount point

#----- Networking -----------------------------------------
# Configure /etc/conf.d/net
cd /etc/init.d
ln -s net.lo net.enp2s0f0
ln -s net.lo net.xenbr0

# Add to 
rc-update add net.enp2s0f0 default
rc-update add net.xenbr0 default

#----- Other Stuff ----------------------------------------
## Fix the default editor
eselect editor list

## Set root's password
passwdsed -i "s/ZFS=\//ZFS=${POOL}\//g" grub/grub.cfg


## Correct keyboard layout
vim /etc/conf.d/keymaps
# No need on this system (iLO 2)

## fstab - correct
# comment out boot & root
"/dev/sys-pl/swap        none            swap            sw              0 0"

## System logger
# metalog for the moment - we'll need to do remote logging eventually
emerge -avt app-admin/metalog
rc-update add metalog default

## Enable cron daemon
emerge -avt sys-process/fcron
rc-update add fcron default
crontab /etc/crontab

## Enable SSH in default runlevel
rc-update add sshd default

#----- Install Stuff --------------------------------------
## system monitor
SYS_MON="sys-process/htop \
    sys-process/lsof \
    sys-process/nmon \
    sys-apps/pciutils \
    sys-apps/usbutils"

## portage tools
PORTAGE="app-portage/gentoolkit \
    app-portage/layman \
    app-portage/pfl"

## network tools
NET_TOOLS="net-analyzer/nmap \
    net-analyzer/traceroute \
    net-dns/bind-tools \
    net-misc/netifrc \
    net-analyzer/iptraf-ng \
    net-analyzer/ettercap \
    net-misc/dhcpcd \
    net-firewall/iptables \
    net-misc/netkit-telnetd \
    net-misc/bridge-utils"

## Block devices
BLOCK="sys-block/parted"

## General purpose
GENERAL="app-misc/screen \
    app-editors/vim \
    app-text/tree \
    app-shells/zsh"

emerge -avt ${SYS_MON} ${PORTAGE} ${NET_TOOLS} ${BLOCK} ${GENERAL}

